<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Abra seu Código!!!</title><link href="http://blog.abraseucodigo.com.br/" rel="alternate"></link><link href="http://blog.abraseucodigo.com.br/feeds/all.atom.xml" rel="self"></link><id>http://blog.abraseucodigo.com.br/</id><updated>2016-02-18T21:16:00-02:00</updated><entry><title>Django assertFormErrorCode com py.test e com TestCase</title><link href="http://blog.abraseucodigo.com.br/django-assertformerrorcode-com-pytest-e-com-testcase.html" rel="alternate"></link><updated>2016-02-18T21:16:00-02:00</updated><author><name>Rafael Henrique da Silva Correia</name></author><id>tag:blog.abraseucodigo.com.br,2016-02-18:django-assertformerrorcode-com-pytest-e-com-testcase.html</id><summary type="html">&lt;p&gt;Estive trabalhando em um teste hoje utilizando py.test e queria usar assertFormErrorCode padrão da suite de testes do Django, porém não queria extender meu teste de TestCase, como fazer?&lt;/p&gt;
&lt;p&gt;Ta legal, se perdeu? Continue lendo abaixo que vou explicar o que é o assertFormErrorCode e também como utilizá-lo sem depender da suite de testes do Django.&lt;/p&gt;
&lt;div class="section" id="introducao"&gt;
&lt;h2&gt;Introdução&lt;/h2&gt;
&lt;p&gt;Aprendi a usar recentemente vários asserts poderosos que o Django já te dá de presente na sua suite de testes. Quem me mostrou isso foi o &lt;a class="reference external" href="https://twitter.com/henriquebastos"&gt;Henrique Bastos&lt;/a&gt; no curso &lt;a class="reference external" href="http://welcometothedjango.com.br/"&gt;Welcome to the Django&lt;/a&gt; o qual recomendo a todos que façam, pois é um ótimo curso, e gostaria de fazer um agradecimento especial neste post! Parabéns Henrique pelo ótimo curso!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="codigos-postados-aqui"&gt;
&lt;h2&gt;Códigos postados aqui&lt;/h2&gt;
&lt;p&gt;Os códigos de exemplo deste post em sua maioria podem ser visualizados e estudados no github em um commit anterior ao atual do projeto wttd, clique &lt;a class="reference external" href="https://github.com/rafaelhenrique/wttd/tree/85c702631923cd3b47ec992c4cfcb06d9f172827"&gt;aqui para visualizar o projeto como um todo.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mas-o-que-e-assertformerrorcode"&gt;
&lt;h2&gt;Mas o que é assertFormErrorCode?&lt;/h2&gt;
&lt;p&gt;Este assert é mais um dos asserts interessantíssimos que o Django tem na sua suite de testes. Vejamos um exemplo de como esse cara pode ser usado nos seus testes:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Formulário básico de inscrição&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;wttd/eventex/subscriptions/forms.py&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate_cpf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CPF deve conter apenas números&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;digits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CPF deve ter 11 números&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubscriptionForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cpf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;CPF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;validators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;validate_cpf&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmailField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Telefone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;linhas&lt;/span&gt; &lt;span class="n"&gt;omitidas&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perceba que este é um formulário bem básico onde podemos ver claramente que o campo &lt;tt class="docutils literal"&gt;cpf&lt;/tt&gt; é validado com regras bem básicas onde somente verificamos 2 coisas:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;se o cpf digitado não contem caracteres que não sejam números&lt;/li&gt;
&lt;li&gt;se o cpf tem 11 dígitos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O que eu acho mais interessante deste código é a questão do &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt;! Em todo &lt;tt class="docutils literal"&gt;ValidationError&lt;/tt&gt; de podemos passar um &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt; como parâmetro, que no caso das duas validações acima, podemos visualizar os códigos de erro &lt;tt class="docutils literal"&gt;digits&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;length&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Ta legal, você não curtiu? É eu também não via sentido nisso antes de ver o que era possível fazer com isso.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pra-que-especificar-errorcodes-nos-seus-validationerror"&gt;
&lt;h2&gt;Pra que especificar &lt;tt class="docutils literal"&gt;ErrorCodes&lt;/tt&gt; nos seus &lt;tt class="docutils literal"&gt;ValidationError&lt;/tt&gt;?&lt;/h2&gt;
&lt;p&gt;Quando você cria um teste comumente você vai querer saber quais as mensagens de erro o seu formulário está exibindo para os usuários, porém ai vem a questão, se você tem milhares de formulários com milhares de mensagens de erro, como é o trabalho que você terá?&lt;/p&gt;
&lt;p&gt;Se você mudar uma mensagem de erro você terá que sair garimpando no seu código onde você estava usando aquela mensagem para poder modificar para a nova e isso gasta TEMPO e consequentemente DINHEIRO! Fora que é chato pra caramba!&lt;/p&gt;
&lt;p&gt;Pensando nisso você pode criar seus testes apontando para o &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt; assim se a mensagem mudar o &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt; permanecerá o mesmo e você não quebra nenhum teste! Sensacional isso!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="show-me-the-code"&gt;
&lt;h2&gt;Show me the code&lt;/h2&gt;
&lt;p&gt;Vejamos abaixo um teste criado no Django utilizando a verificação por &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Teste do formulário básico de inscrição&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;wttd/eventex/subscriptions/tests/test_form_subscription.py&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;eventex.subscriptions.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SubscriptionForm&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubscriptionFormTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;linhas&lt;/span&gt; &lt;span class="n"&gt;omitidas&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cpf_is_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;CPF must only accept digits&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make_validated_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ABCD5678901&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFormErrorCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cpf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;digits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;linhas&lt;/span&gt; &lt;span class="n"&gt;omitidas&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Olha ai que bacana esse teste! Limpo! Se você mudar a mensagem de erro no form o teste independe da mensagem, ele sempre irá olhar para o &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tudo-bonito-e-maravilhoso-mas"&gt;
&lt;h2&gt;Tudo bonito e maravilhoso mas...&lt;/h2&gt;
&lt;p&gt;Mas... se você não usar a suite de testes do Django (herdando a classe TestCase) você não ganha esse assert maravilhoso chamado &lt;tt class="docutils literal"&gt;assertFormErrorCode&lt;/tt&gt;. E agora?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="procurando-uma-solucao-que-funciona-independente-do-testcase"&gt;
&lt;h2&gt;Procurando uma solução que funciona independente do TestCase&lt;/h2&gt;
&lt;p&gt;Depois de garimpar algum tempo na internet (e amolar um amigo do trabalho) achei este post &lt;a class="reference external" href="http://stackoverflow.com/questions/18781492/forms-validationerror-and-error-code"&gt;aqui&lt;/a&gt; no stack overflow, o padroeiro dos desenvolvedores de software.&lt;/p&gt;
&lt;p&gt;Neste post o cara colocou uma forma diferente de conseguir pegar o &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt; que está na exception do &lt;tt class="docutils literal"&gt;ValidationError&lt;/tt&gt;, ele usou:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print(form.errors.as_json())
{&amp;quot;__all__&amp;quot;: [
    {&amp;quot;message&amp;quot;: &amp;quot;Your account has not been activated.&amp;quot;, &amp;quot;code&amp;quot;: &amp;quot;inactive&amp;quot;}
]}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Desta forma o cara trouxe o erro do form em json e depois desta maneira ele consegue pegar uma key chamada &amp;quot;code&amp;quot; onde está o &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt;. Achei bacana isso ai, porém não é tão simples como o cara postou (nunca é).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="minha-solucao"&gt;
&lt;h2&gt;Minha solução&lt;/h2&gt;
&lt;p&gt;Criei uma classe de teste base minha chamada &lt;tt class="docutils literal"&gt;BaseTest&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Classe base de testes&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;este cara não está no github&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Send post to form.&lt;/span&gt;

&lt;span class="sd"&gt;            endpoint: url for endpoint to test&lt;/span&gt;
&lt;span class="sd"&gt;            data: data to send to form&lt;/span&gt;
&lt;span class="sd"&gt;            field_name: name of form field on Django.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;context&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_data&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;field_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Meu problema era fazer um post retornar os &lt;tt class="docutils literal"&gt;ErrorCodes&lt;/tt&gt; de forma fácil, com essa classe &lt;tt class="docutils literal"&gt;BaseTest&lt;/tt&gt; consegui atingir meu objetivo. Explicando de forma detalhada:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Primeiro importei o &lt;tt class="docutils literal"&gt;Client&lt;/tt&gt; do Django que é um cara que eu realmente queria usar para fazer meus requests;&lt;/li&gt;
&lt;li&gt;O &lt;tt class="docutils literal"&gt;setup&lt;/tt&gt; do py.test é tudo em minúsculo mesmo (diferente do Django);&lt;/li&gt;
&lt;li&gt;Ao colocar criar o &lt;tt class="docutils literal"&gt;self.client&lt;/tt&gt; consigo usar o mesmo client para o resto da classe em forma de atributo;&lt;/li&gt;
&lt;li&gt;Criei um método de post para ser usado pela classe filha, onde eu retorno resp que é o response do request que o &lt;tt class="docutils literal"&gt;self.client.post&lt;/tt&gt; executa e também retorno uma lista contendo os meus &lt;tt class="docutils literal"&gt;ErrorCodes&lt;/tt&gt; todos bonitos em uma única lista.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bem feito isso é só usar esse cara! Código de exemplo de uso:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Teste que usa a classe BaseTest, baseada na classe SubscriptionFormTest&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;este cara não está no github&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;linhas&lt;/span&gt; &lt;span class="n"&gt;omitidas&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSubscriptionForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseTest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_post_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cpf&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cpf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;digits&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="n"&gt;linhas&lt;/span&gt; &lt;span class="n"&gt;omitidas&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Desta forma este teste só vai passar caso o &lt;tt class="docutils literal"&gt;ErrorCode&lt;/tt&gt; &lt;tt class="docutils literal"&gt;digits&lt;/tt&gt; sejá levantado como exceção do &lt;tt class="docutils literal"&gt;ValidationError&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Basicamente foi essa a brincadeira de hoje, eu achei bem legal, mesmo sem extender o TestCase padrão do Django conseguimos fazer a mesma coisa. Neste caso foi um pouco diferente pois o meu teste era pra validar um post e não propriamente um form, mas creio que a idéia tenha ficado clara, caso não, se não entenderem alguma coisa não deixem de me contatar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusao"&gt;
&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;Quando você não consegue usar um recurso padrão Django dentro do Django para fazer alguma coisa, nunca se esqueça que o Django é Python, e sempre você conseguirá fazer algo para contornar a situação de uma forma bacana.&lt;/p&gt;
&lt;p&gt;Bom é isso espero que tenham gostado do post! Deixem seus comentários!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="django"></category><category term="pytest"></category><category term="testcase"></category><category term="tdd"></category></entry><entry><title>virtualenv/pip pra que servem?</title><link href="http://blog.abraseucodigo.com.br/virtualenv-pip-pra-que-servem.html" rel="alternate"></link><updated>2016-02-17T21:18:00-02:00</updated><author><name>Rafael Henrique da Silva Correia</name></author><id>tag:blog.abraseucodigo.com.br,2016-02-17:virtualenv-pip-pra-que-servem.html</id><summary type="html">&lt;p&gt;Existem muitos posts pela internet afora dizendo como usar virtualenv e pip, e realmente é muito fácil. Mas para um iniciante a pergunta que vem a mente é... pra que serve virtualenv? Pra que serve pip?&lt;/p&gt;
&lt;div class="section" id="explicando-para-quem-nunca-desenvolveu-em-python"&gt;
&lt;h2&gt;Explicando para quem nunca desenvolveu em Python&lt;/h2&gt;
&lt;p&gt;Imagine que você tem um programa na sua máquina em uma versão 1.0.0 e em dado momento você quer instalar a versão 1.0.1, porém, você também precisa da versão 1.0.0 pois você tem algum arquivo que não abre na versão mais nova.&lt;/p&gt;
&lt;p&gt;Pois é, este problema também acontece com os desenvolvedores Python, e a solução criada para este problema foi o nosso amigo &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-virtualenv"&gt;
&lt;h2&gt;O virtualenv&lt;/h2&gt;
&lt;p&gt;Uilizando o &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; você consegue isolar as bibliotecas do projeto A em relação ao projeto B.&lt;/p&gt;
&lt;p&gt;Imagine que em determinado momento que o projeto A começou a ser desenvolvido você ainda não tinha Python3 e optou por usar Python2 e mais um monte de bibliotecas do Python2, porém o projeto B usa Python3 e obviamente você não vai querer usar as bibliotecas do Python2 pois você deu uma evoluída nesse projeto e quer usar tudo que existe de mais novo no mundo Python.&lt;/p&gt;
&lt;p&gt;Já imaginou a bagunça que seu sistema operacional vai fazer? O S.O. vai colocar a versão antiga e a nova no mesmo diretório e quando você chamar o comando &lt;cite&gt;import&lt;/cite&gt; do Python para importar sua biblioteca você sempre ficará em dúvida de qual a versão você importou. Isso vira um caos com o passar do tempo, principalmente depois de você instalar muitas bibliotecas.&lt;/p&gt;
&lt;p&gt;Apenas fazendo um comentário pertinente, biblioteca também pode ser chamadas de módulos em Python e vice-versa. Estou chamando de biblioteca pois fica mais fácil para as pessoas que vem de outras linguagens entenderem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-pip"&gt;
&lt;h2&gt;O pip&lt;/h2&gt;
&lt;p&gt;Falei um pouco sobre &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt;, mas e o &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;O &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; é o &amp;quot;gerenciador de pacotes&amp;quot; do Python. Assim como o &lt;a class="reference external" href="https://www.debian.org/doc/manuals/apt-howto/ch-apt-get.pt-br.html"&gt;apt-get&lt;/a&gt; e o &lt;a class="reference external" href="http://brew.sh/"&gt;homebrew&lt;/a&gt; que são os gerenciadores de pacotes do Ubuntu/Mac OSX o &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt; é o instalador de bibliotecas de terceiros padrão do Python.&lt;/p&gt;
&lt;p&gt;Com o pip você poderá instalar qualquer biblioteca disponível no famoso site de bibliotecas da Python Software Foundation o &lt;a class="reference external" href="https://pypi.python.org/pypi"&gt;PyPi&lt;/a&gt;. Eu não tenho ideia de como verificar quantas bibliotecas Python existem hoje no PyPi, mas posso dizer que são centenas, ou milhares! São muitos MESMO, para os mais variados fins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hands-on"&gt;
&lt;h2&gt;Hands-on&lt;/h2&gt;
&lt;p&gt;Vamos criar um projeto chamado &lt;tt class="docutils literal"&gt;myprojectA&lt;/tt&gt; e outro chamado &lt;tt class="docutils literal"&gt;myprojectB&lt;/tt&gt; para demonstrar o uso do isolamento de ambientes que &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; nos ajuda a fazer, também iremos instalar bibliotecas com o &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; durante o processo.&lt;/p&gt;
&lt;p&gt;Para executar este passo a passo estou usando Python 3:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Se você não tem Python 3 instalado e usar Windows clique &lt;a class="reference external" href="http://blog.abraseucodigo.com.br/instalando-python35-no-windows-7.html"&gt;aqui&lt;/a&gt; para ir ao post que escrevi ontem descrevendo este procedimento;&lt;/li&gt;
&lt;li&gt;Se você não tem Python 3 instalado e usar Linux ou Mac OSX você poderá usar o apt-get, yum ou homebrew para instalar Python3 no seu computador de forma absolutamente simples, porém ainda não fiz posts sobre isso.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No Windows vou abrir o &lt;tt class="docutils literal"&gt;Prompt de comandos&lt;/tt&gt; que terá essa cara:&lt;/p&gt;
&lt;img alt="prompt de comandos" src="images/prompt-windows-7.png" /&gt;
&lt;p&gt;Onde &lt;tt class="docutils literal"&gt;rafael&lt;/tt&gt; é meu nome de usuário e o caminho padrão que usarei é &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\rafael&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;No Linux/Mac OSX vamos abrir um terminal que terá esta aparência:&lt;/p&gt;
&lt;img alt="terminal linux mac osx" src="images/terminal.png" /&gt;
&lt;p&gt;Onde &lt;tt class="docutils literal"&gt;rafael&lt;/tt&gt; também é meu nome de usuário e o caminho padrão que usarei é &lt;tt class="docutils literal"&gt;/home/rafael&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Clique abaixo para continuar o procedimento relativo ao seu sistema operacional:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#criando-virtualenv-e-utilizando-o-pip-no-windows"&gt;Criando virtualenv e utilizando o pip no Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#criando-virtualenv-e-utilizando-o-pip-no-linux-e-mac-osx"&gt;Criando virtualenv e utilizando o pip no Linux e Mac OSX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="criando-virtualenv-e-utilizando-o-pip-no-windows"&gt;
&lt;h2&gt;Criando virtualenv e utilizando o pip no Windows&lt;/h2&gt;
&lt;p&gt;Vamos criar o diretório do projeto &lt;tt class="docutils literal"&gt;myprojectA&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Users\rafael&amp;gt; mkdir myprojectA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vamos entrar nesta pasta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Users\rafael&amp;gt; cd myprojectA
C:\Users\rafael\myprojectA&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Posteriormente vamos criar um virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Users\rafael\myprojectA&amp;gt; python -m venv .venv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pronto criamos um virtualenv onde este cara ficará armazenado em uma pasta nomeado como &lt;cite&gt;.venv&lt;/cite&gt;, como podemos ver abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Users\rafael\myprojectA&amp;gt; dir
... linhas omitidas ...

02/16/2016   10:36 PM   &amp;lt;DIR&amp;gt;        .venv

... linhas omitidas ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Para começar a usar esse virtualenv temos que ativá-lo para isso execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Users\rafael\myprojectA&amp;gt; .venv\Scripts\activate.bat
(.venv) C:\Users\rafael\myprojectA&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perceba que o seu prompt vai ser modificado e o prefixo (.venv) será acrescentado no começo dele. Agora vamos instalar uma biblioteca, o ipython:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv) C:\Users\rafael\myprojectA&amp;gt; pip install ipython
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; tem várias dependências (que irão ser instaladas juntamente com ele, não se assuste) e sua função é seu um interpretador do Python com mais recursos. Quando eu não passo uma versão específica ao &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; ele vai instalar sempre a última versão estável da biblioteca, no momento que instalei no meu computador a versão corrente era a 4.1.1. Então neste projeto que chamei de &lt;tt class="docutils literal"&gt;myprojectA&lt;/tt&gt; teremos as seguintes bibliotecas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv) C:\Users\rafael\myprojectA&amp;gt; pip freeze
decorator==4.0.9
ipython==4.1.1
ipython-genutils==0.1.0
path.py==8.1.2
pickeshare==0.6
simplegeneric==0.8.1
traitlets==4.1.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Com o comando acima &lt;tt class="docutils literal"&gt;pip freeze&lt;/tt&gt; veremos todas as bibliotecas instaladas nesse &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; e suas respectivas versões. Não vou detalhar neste post todos os poderes do &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, mas o parâmetro &lt;tt class="docutils literal"&gt;freeze&lt;/tt&gt; é extremamente importante para o desenvolvimento de sistemas em Python, futuramente posso fazer um post só explicando setup de projetos Python, se quiserem esse post rápido me dêem um toque ai nos comentários.&lt;/p&gt;
&lt;p&gt;Para não ser muito repetitivo (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;) no post e para aplicar um exercício de fixação ao mesmo tempo, refaça os passos com o diretório &lt;tt class="docutils literal"&gt;myprojectB&lt;/tt&gt; mas antes disso desative o &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; atual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv) C:\Users\rafael\myprojectA&amp;gt; .venv\Scripts\deactivate.bat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ao chegar no passo em que você instala o &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; pelo &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; não faça isso desta vez, quando chegar nesta etapa execute o comando abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv) C:\Users\rafael\myprojectB&amp;gt; pip install ipython==3.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Desta forma vamos testemunhar o isolamento de ambientes! Ao terminar a instalaçào do &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; (versão 3.0.0), verifique o que você acabou de instalar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv) C:\Users\rafael\myprojectB&amp;gt; pip freeze
ipython=3.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ai você vai me perguntar &amp;quot;ué!? cadê os requisitos!?&amp;quot; pois é... nesta versão do &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; ele não tinha tantos requisitos, só por essa demonstração já conseguimos ver o isolamento entre os ambientes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="criando-virtualenv-e-utilizando-o-pip-no-linux-e-mac-osx"&gt;
&lt;h2&gt;Criando virtualenv e utilizando o pip no Linux e Mac OSX&lt;/h2&gt;
&lt;p&gt;Vamos criar o diretório do projeto &lt;tt class="docutils literal"&gt;myprojectA&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rafael@bloodmary:~$ mkdir myprojectA
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vamos entrar nesta pasta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rafael@bloodmary:~$ cd myprojectA
rafael@bloodmary:myprojectA$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Posteriormente vamos criar um virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rafael@bloodmary:myprojectA$ python3 -m venv .venv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pronto criamos um virtualenv onde este cara ficará armazenado em uma pasta nomeado como &lt;cite&gt;.venv&lt;/cite&gt;, como podemos ver abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rafael@bloodmary:myprojectA$ ls -a
.  ..  .python-version  .venv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Para começar a usar esse virtualenv temos que ativá-lo para isso execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rafael@bloodmary:myprojectA$ source .venv/bin/activate
(.venv)rafael@bloodmary:myprojectA$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perceba que o seu prompt vai ser modificado e o prefixo (.venv) será acrescentado no começo dele. Agora vamos instalar uma biblioteca, o ipython:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv)rafael@bloodmary:myprojectA$ pip install ipython
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;O &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; tem várias dependências (que irão ser instaladas juntamente com ele, não se assuste) e sua função é seu um interpretador do Python com mais recursos. Quando eu não passo uma versão específica ao &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; ele vai instalar sempre a última versão estável da biblioteca, no momento que instalei no meu computador a versão corrente era a 4.1.1. Então neste projeto que chamei de &lt;tt class="docutils literal"&gt;myprojectA&lt;/tt&gt; teremos as seguintes bibliotecas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv)rafael@bloodmary:myprojectA$ pip freeze
decorator==4.0.9
ipython==4.1.1
ipython-genutils==0.1.0
path.py==8.1.2
pexpect==4.0.1
pickleshare==0.6
ptyprocess==0.5.1
simplegeneric==0.8.1
traitlets==4.1.0
wheel==0.24.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Com o comando acima &lt;tt class="docutils literal"&gt;pip freeze&lt;/tt&gt; veremos todas as bibliotecas instaladas nesse &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; e suas respectivas versões. Não vou detalhar neste post todos os poderes do &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, mas o parâmetro &lt;tt class="docutils literal"&gt;freeze&lt;/tt&gt; é extremamente importante para o desenvolvimento de sistemas em Python, futuramente posso fazer um post só explicando setup de projetos Python, se quiserem esse post rápido me dêem um toque ai nos comentários.&lt;/p&gt;
&lt;p&gt;Para não ser muito repetitivo (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;) no post e para aplicar um exercício de fixação ao mesmo tempo, refaça os passos com o diretório &lt;tt class="docutils literal"&gt;myprojectB&lt;/tt&gt; mas antes disso desative o &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; atual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv)rafael@bloodmary:myprojectA$ deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ao chegar no passo em que você instala o &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; pelo &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; não faça isso desta vez, quando chegar nesta etapa execute o comando abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv)rafael@bloodmary:myprojectB$ pip install ipython==3.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Desta forma vamos testemunhar o isolamento de ambientes! Ao terminar a instalaçào do &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; (versão 3.0.0), verifique o que você acabou de instalar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;(.venv) rafael@bloodmary:myprojectB$ pip freeze
ipython==3.0.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ai você vai me perguntar &amp;quot;ué!? cadê os requisitos!?&amp;quot; pois é... nesta versão do &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; ele não tinha tantos requisitos, só por essa demonstração já conseguimos ver o isolamento entre os ambientes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusao"&gt;
&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; são dois &amp;quot;utilitários&amp;quot; muito bacanas do Python, eles te ajudam muito na hora de criar qualquer projeto em Python, espero que esse post seja útil, apesar de ter ficado bem grandinho, mas é que tinha muita coisa pra escrever mesmo e ainda ficou faltando coisa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="referencias-bacanas"&gt;
&lt;h2&gt;Referências bacanas&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://garoa.net.br/wiki/Python/Ambiente_Virtual"&gt;https://garoa.net.br/wiki/Python/Ambiente_Virtual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://virtualenv.readthedocs.org/en/latest/index.html"&gt;http://virtualenv.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.org/en/latest/"&gt;https://virtualenvwrapper.readthedocs.org/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="virtualenv"></category><category term="pip"></category></entry><entry><title>Instalando Python 3.5 no Windows 7</title><link href="http://blog.abraseucodigo.com.br/instalando-python35-no-windows-7.html" rel="alternate"></link><updated>2016-02-16T21:09:00-02:00</updated><author><name>Rafael Henrique da Silva Correia</name></author><id>tag:blog.abraseucodigo.com.br,2016-02-16:instalando-python35-no-windows-7.html</id><summary type="html">&lt;p&gt;Muitos tem a dúvida de como instalar Python no Windows, hoje vou postar aqui um passo a passo bem básico pra que você consiga instalar Python3 no Windows 7.&lt;/p&gt;
&lt;p&gt;Estou especificando as versões do Windows e a versão do Python pois como ambos evoluem com o tempo (e muito rapidamente) então creio eu que logo esse post irá ficar velho.&lt;/p&gt;
&lt;p&gt;Ao escrever este post também tenho conhecimento que o Windows 10 é o Windows &amp;quot;da moda&amp;quot; porém neste momento só tenho uma máquina virtual de Windows 7 e estou sem tempo para criar uma máquina virtual de Windows 10, mas pelas pesquisas e googladas na internet creio que este post também será útil para outras versões do Windows.&lt;/p&gt;
&lt;div class="section" id="baixando-o-python"&gt;
&lt;h2&gt;Baixando o Python&lt;/h2&gt;
&lt;p&gt;Você poderá baixar a versão oficial do Python neste site:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/downloads"&gt;https://www.python.org/downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A página acessada será semelhante a esta:&lt;/p&gt;
&lt;img alt="python download" src="images/instalando-python35-no-windows-7/01.png" /&gt;
&lt;p&gt;Baixe a release 3.5.1 (disponível atualmente), se quiser baixar diretamente clique:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/ftp/python/3.5.1/python-3.5.1.exe"&gt;aqui para baixar a versão 32 bits&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.python.org/ftp/python/3.5.1/python-3.5.1-amd64.exe"&gt;aqui para baixar a versão 64 bits&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recomendo verificar qual a arquitetura do seu sistema operacional para isso pressione as teclas &lt;tt class="docutils literal"&gt;Windows + Pause Break&lt;/tt&gt; do seu teclado ou &lt;tt class="docutils literal"&gt;clique com o direito no ícone do Computador e posteriormente clique em propriedades&lt;/tt&gt;, a seguinte tela será apresentada:&lt;/p&gt;
&lt;img alt="system" src="images/instalando-python35-no-windows-7/02.png" /&gt;
&lt;p&gt;Observe que eu grifei em vermelho a arquitetura do meu Windows instalado que é de 32 bits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="instalando-o-python"&gt;
&lt;h2&gt;Instalando o Python&lt;/h2&gt;
&lt;p&gt;Basicamente para instalar o Python depois de baixado clique duas vezes no executável baixado. A instalação é bem tranquila e bem next.. next.. finish.&lt;/p&gt;
&lt;p&gt;Ao clicar duas vezes no executável a seguinte tela será aberta:&lt;/p&gt;
&lt;img alt="python wizard 01" src="images/instalando-python35-no-windows-7/03.png" /&gt;
&lt;p&gt;Repare que aqui nesta tela inicial o que é mais importante é marcar a opção &lt;tt class="docutils literal"&gt;Add Python3.5 to PATH&lt;/tt&gt; desta forma você não precisará configurar as variáveis de ambiente do seu Windows posteriormente (pois isso é meio chato de se fazer manualmente). Marcada essa opção clique em &lt;tt class="docutils literal"&gt;Install Now&lt;/tt&gt;, ao clicar nesta opção o processo de instalação será iniciado:&lt;/p&gt;
&lt;img alt="python wizard 02" src="images/instalando-python35-no-windows-7/04.png" /&gt;
&lt;p&gt;Aguarde alguns instantes e esta outra tela será apresentada:&lt;/p&gt;
&lt;img alt="python wizard 03" src="images/instalando-python35-no-windows-7/05.png" /&gt;
&lt;p&gt;Feito isso clique em &lt;tt class="docutils literal"&gt;Close&lt;/tt&gt;, caso tenha algum problema nesta parte por favor me contate por email ou nos comentários abaixo deste post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conferindo-quais-programas-voce-ganhou"&gt;
&lt;h2&gt;Conferindo quais programas você &amp;quot;ganhou&amp;quot;&lt;/h2&gt;
&lt;p&gt;Vejamos inicialmente o que instalamos:&lt;/p&gt;
&lt;img alt="iniciar" src="images/instalando-python35-no-windows-7/06.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;IDLE&lt;/tt&gt;: Uma IDE de linha de comando muito simples para começar suas aventuras no mundo Python;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Python 3.5&lt;/tt&gt;: Irá abrir o interpretador do Python no seu &lt;tt class="docutils literal"&gt;Prompt de comandos&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Python 3.5 Manuals&lt;/tt&gt;: Toda a documentação do Python que está online &lt;a class="reference external" href="https://docs.python.org/3/"&gt;aqui&lt;/a&gt; ficará no seu computador para você acessar offline (para casos extremos onde você ficou sem internet).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Python 3.5 Module Docs&lt;/tt&gt;: Uma referência sobre os módulos Python, ao clicar neste carinha será iniciado um servidorzinho que te servirá essa documentação, quando quiser sair basta ir ao console aberto e digitar &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; seguido de enter que o servidorzinho será desligado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para começar seus estudos em Python é importante saber que a partir desta instalação você acaba de &amp;quot;ganhar&amp;quot; alguns programas que te ajudarão na sua jornada pelo conhecimento, alguns merecer destaque:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;: Um poderoso gerenciador de pacotes/bibliotecas do Python, com ele você pode instalar muitas e muitas bibliotecas de terceiros;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt;: Um cara &amp;quot;separador&amp;quot; de ambientes, não faz muito tempo este cara foi incorporado ao Python (antes ele era um cara fora do Python), ele serve para que você tenha diversas versões da mesma biblioteca para projetos diferentes sem que elas colidam e briguem entre si para ver qual a versão vai assumir e ficar a frente quando você chamar um &lt;tt class="docutils literal"&gt;import&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusao"&gt;
&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;Não é difícil instalar Python no Windows, mas tem que se atentar a alguns detalhes bem simples. No próximo post pretendo descrever como e pra que serve o &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; que você acabou de instalar.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="windows"></category><category term="instalar python"></category></entry><entry><title>Como criar seu PaaS com Tsuru</title><link href="http://blog.abraseucodigo.com.br/como-criar-seu-paas-com-tsuru.html" rel="alternate"></link><updated>2015-09-22T22:48:00-03:00</updated><author><name>Rafael Henrique da Silva Correia</name></author><id>tag:blog.abraseucodigo.com.br,2015-09-22:como-criar-seu-paas-com-tsuru.html</id><summary type="html">&lt;p&gt;Começo este post dizendo que gostei bastante da proposta do Tsuru. &lt;/p&gt;
&lt;h2&gt;Mas o que é o Tsuru?&lt;/h2&gt;
&lt;p&gt;Tsuru é um software que você pode criar seu próprio &lt;a href="https://en.wikipedia.org/wiki/Platform_as_a_service"&gt;PaaS&lt;/a&gt; explicando de forma simples, você tem um &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;/&lt;a href="https://www.openshift.com"&gt;Openshift&lt;/a&gt; pessoal onde você tem controle completo na máquina e você pode fazer o que bem entender.&lt;/p&gt;
&lt;h2&gt;E pra que serve esse tal Tsuru?&lt;/h2&gt;
&lt;p&gt;Serve para você fazer deploy de suas aplicações de forma BRUTALMENTE RÁPIDA, com a vantagem de não pagar nada para o Openshift nem para o Heroku, mesmo que seja uma aplicação grande e pesada, quem vai gerenciar os recursos é você mesmo, então se sua máquina "explodir" a culpa será sua, pois você tem controle absoluto sobre os recursos da máquina em que você irá instalar o Tsuru.&lt;/p&gt;
&lt;h2&gt;Quem é o pai do Tsuru?&lt;/h2&gt;
&lt;p&gt;O pai do Tsuru (pelo que eu sei pelo menos) é o Andrews Medina, e este cara começou a desenvolver o Tsuru dentro da Globo.com. Podemos ver até na doc do Tsuru o Copyright da Globo.com, isso fica bem evidente que a Globo.com tem um dedinho ai.&lt;/p&gt;
&lt;p&gt;O Andrews Medina também fez inúmeros vídeos no YouTube muito bons explicando mais sobre o Tsuru, recomendo TODOS.. principalmente os três abaixo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=YD3iNEBb4t0"&gt;tsuru - fazendo deploys de forma simples e divertida&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=h68DCFFXGW0"&gt;Garoa Hacker | Entrevista: Andrews Medina (possui 3 partes)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=dC79RpifEQI"&gt;Garoa Hacker Club | Andrews Medina - Tsuru Live Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Por que raios eu estou falando do Tsuru?&lt;/h2&gt;
&lt;p&gt;Volto a dizer... achei SENSACIONAL o deploy realizado pelo Tsuru, extremamente rápido e seguro. Então ontem eu subi o meu PaaS utilizando o Tsuru &lt;img style="margin-bottom: -0.25em;height:1.5em;             display:inline-block;" src="/emojis/raised_hands.png"&gt;.&lt;/p&gt;
&lt;h2&gt;Procedimentos básicos&lt;/h2&gt;
&lt;p&gt;A doc do Tsuru é excelente e pode ser lida &lt;a href="http://docs.tsuru.io/en/stable/understanding/index.html"&gt;aqui&lt;/a&gt;, mas tem um porém, caso você seja apenas um xereta (assim como eu), não recomendo fazer a instalação através dessa doc, pois você irá travar assim como eu no passo &lt;a href="http://docs.tsuru.io/en/stable/installing/adding-nodes.html"&gt;Adding Nodes&lt;/a&gt; muito provavelmente. &lt;/p&gt;
&lt;p&gt;Neste "Adding Nodes" é o passo onde você terá que adicionar uma *instância de IaaS da &lt;a href="https://aws.amazon.com/pt/ec2/"&gt;Amazon EC2&lt;/a&gt; ou de &lt;a href="https://cloudstack.apache.org/"&gt;Apache CloudStack&lt;/a&gt;, por isso eu disse que você provavelmente vai travar se for um curioso, por que?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pois no EC2 você terá que pagar a instância, que é uma coisa que provavelmente você não vai querer fazer a princípio&lt;/li&gt;
&lt;li&gt;e o CloudStack não é pago, porém extremamente complexo, pelo menos eu achei&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Portanto minha escolha óbvia foi fazer o "procedimento mais fácil" (dica do @rpedigoni) que é usar o &lt;a href="https://github.com/tsuru/now"&gt;Tsuru Now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;* Não sei se o nome certo para o CloudStack é instância, se eu estiver errado me desculpem&lt;/p&gt;
&lt;h2&gt;Procedimento "mais fácil"&lt;/h2&gt;
&lt;p&gt;Cara por que eu coloquei essas aspas ai? &lt;/p&gt;
&lt;p&gt;Meu, o Tsuru Now é um script em Shell bem antiguinho (pelo menos ao meu ver) e ele não é tão intuitivo como promete, creio que na época que ele foi criado ele deveria ser mais fácil de usar, mas agora devido ao tempo e versões mais novas de sistema operacional ele se tornou meio obsoleto.&lt;/p&gt;
&lt;p&gt;Mas mesmo obsoleto galera, eu ainda recomendo esse cara, pois se você aprender a domá-lo você consegue subir o Tsuru bem tranquilão.&lt;/p&gt;
&lt;h2&gt;Ferramentas utilizadas&lt;/h2&gt;
&lt;p&gt;Para subir o meu Tsuru estou utilizando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tsuru/now"&gt;Tsuru Now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-your-first-digitalocean-droplet-virtual-server"&gt;Um droplet da Digital Ocean&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;S.O. Ubuntu 14.04 x64&lt;/li&gt;
&lt;li&gt;512MB Ram &lt;/li&gt;
&lt;li&gt;20GB SSD Disk &lt;/li&gt;
&lt;li&gt;New York 3&lt;/li&gt;
&lt;li&gt;Neste droplet a configuração default da Digital Ocean é vir 2 interfaces de rede, uma eth0 que será o ip externo e a lo que representa o loopback&lt;/li&gt;
&lt;li&gt;Valor desse cara $5 por mês&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Caso você não queira pagar absolutamente NADA também é possível, você só terá o trabalho de configurar as interfaces da sua máquina física (ou virtual, sei lá) e instalar o Ubuntu 14.04 x64 (o x32 eu não testei e não sei se funciona bem!).&lt;/p&gt;
&lt;h2&gt;Problemas encontrados logo no começo&lt;/h2&gt;
&lt;p&gt;No repositório do &lt;a href="https://github.com/tsuru/now"&gt;github do Tsuru Now&lt;/a&gt; tem algumas informações faltantes a respeito da compatibilidade com os Sistemas operacionais. Lá no README ele menciona que este script funciona em Debian e Ubuntu, mas não diz a versão &lt;img style="margin-bottom: -0.25em;height:1.5em;             display:inline-block;" src="/emojis/pensive.png"&gt;.&lt;/p&gt;
&lt;p&gt;Eu como um bom paranóico amante de Debian, fui logo criando um droplet na Digital Ocean com o Debian mais novo que encontrei o 8.1~8.2 (Jessie Stable), ai rodei o script conforme manda o README:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# curl -sL https://raw.githubusercontent.com/tsuru/now/master/run.bash | bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Coisa linda pra se ver.... massss... não consegui nem ir até 50% da instalação, logo de cara falta o pacote linux-image-extras-* no Debian, e adicionar repositórios começa a ficar meio impraticável pois eu como um bom paranóico, acredito, que se ele não está no repositório main alguma razão deve ter.&lt;/p&gt;
&lt;p&gt;Eis que pensei &lt;em&gt;"pooo... se não vai Debian, os caras devem gostar de Ubuntu... vamos de Ubuntu"&lt;/em&gt;, ai novamente como um bom paranóico fui logo escolhendo a versão MAIS NOVA do Ubuntu, a versão 15.04 x64.... e adivinhem?? Problema de novo.... se não me engano com o mesmo pacote.&lt;/p&gt;
&lt;p&gt;Ai novamente como um bom brasileiro que não desiste nunca fui de novo agora pensei &lt;em&gt;"poooo.... se os caras não gostam desse Ubuntu vou usar o Ubuntu que está referenciado na doc oficial do Tsuru"&lt;/em&gt; que vem a ser o 14.04 ! &lt;/p&gt;
&lt;p&gt;E desta vez fiz progressos significativos, MUITO SIGNIFICATIVOS e consegui concluir cerca de 80% da instalação e o script foi dar pau lá pelo finalzinho próximo da &lt;code&gt;linha 671&lt;/code&gt; quando ele chama a função &lt;code&gt;config_tsuru_post&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ai começa meu instinto de programador maluco e fui depurando a parada. Pelo que pude ver o script não estava pegando meu ip externo adequadamente.&lt;/p&gt;
&lt;h2&gt;Variáveis/adaptação e funcionamento completo&lt;/h2&gt;
&lt;p&gt;Como o Tsuru Now não conseguia pegar meu ip corretamente fui lá e comecei a testar coisas de modo que fizesse o filho da mãe funcionar. Eis que por fim eu consegui, e vou dar a receita de bolo pra vocês. Clone o repositório do Tsuru Now inicialmente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# git clone git@github.com:tsuru/now.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nas primeiras linhas do script chamado &lt;code&gt;run.bash&lt;/code&gt; tem algumas variáveis interessantes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1  #!/bin/bash -ue
2 
3  # Copyright 2015 tsuru-now authors. All rights reserved.
4  # Use of this source code is governed by a BSD-style
5  # license that can be found in the LICENSE file.
6 
7  set -eu
8
9  release=&amp;quot;&amp;quot;
10 codename=&amp;quot;&amp;quot;
11 host_ip=&amp;quot;&amp;quot;
12 private_ip=&amp;quot;&amp;quot;
13 host_name=&amp;quot;&amp;quot;
14 set_interface=&amp;quot;&amp;quot;
15 is_debug=&amp;quot;&amp;quot;
16 docker_node=&amp;quot;&amp;quot;
17 set_interface=&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Destas 17 linhas as variáveis que resolveram minha vira foram &lt;code&gt;host_ip&lt;/code&gt; e &lt;code&gt;private_ip&lt;/code&gt;, nestas duas eu setei meu ip &lt;strong&gt;EXTERNO (ou seja o ip que a galera de fora da sua rede vê)&lt;/strong&gt;, caso você tenha dúvidas qual é seu ip externo recomendo olhar no site &lt;a href="https://www.whatismyip.com/"&gt;What Is My Ip?&lt;/a&gt; que lá ele vai te mostrar o seu ip externo(mas faz o favor de olhar da máquina que você está instalando o Tsuru &lt;img style="margin-bottom: -0.25em;height:1.5em;             display:inline-block;" src="/emojis/joy.png"&gt;).&lt;/p&gt;
&lt;p&gt;Feito isso rodei o script novamente da seguinte maneira (você precisará executar como root, ou usando sudo):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# bash run.bash --host-ip &amp;lt;meu ip externo&amp;gt; | tee log_run.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Troque &amp;lt;meu ip externo&gt; pelo seu ip externo. &lt;/p&gt;
&lt;p&gt;Executando esse comando vá tomar banho, comer, tomar café ou outra coisa desse tipo, pois vai demorar um pouco (calculo pelo menos uns 15 minutos caso você não use um hd SSD).&lt;/p&gt;
&lt;p&gt;Usei o comando &lt;code&gt;| tee log_run.log&lt;/code&gt; para que ele gere um arquivo contendo todo output (erros e não erros) do script, se você quiser analisar depois como foi a instalação ficará mais fácil você ler este arquivo.&lt;/p&gt;
&lt;h2&gt;Finish him!&lt;/h2&gt;
&lt;p&gt;Se tudo correr bem ao fim dessa execução seu Tsuru já vai estar funcionando de forma básica pronta para testes bacaninhas. É importante em um primeiro momento alterar a senha do admin e rodar &lt;code&gt;source ~/.bashrc&lt;/code&gt; conforme manda o próprio Tsuru Now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;######################## DONE! ########################

Some information about your tsuru installation:

Admin user: admin@example.com
Admin password: admin123 (PLEASE CHANGE RUNNING: tsuru change-password)
Target address: http://&amp;lt;meu ip externo&amp;gt;:8080
Dashboard address: http://&amp;lt;meu ip externo&amp;gt;:32768

You should run `source ~/.bashrc` on your current terminal.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para alterar a senha você poderá usar o comando &lt;code&gt;tsuru change-password&lt;/code&gt;. Após você ter seu PaaS instalado e funcional recomendo assistir o vídeo do Andrews para dar seus primeiros passinhos utilizando o tsuru-cli, um vídeo ótimo para começar é este &lt;a href="https://www.youtube.com/watch?v=YD3iNEBb4t0"&gt;tsuru - fazendo deploys de forma simples e divertida&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Espero que tenha gostado do post, deixe seus comentários ali embaixo &lt;img style="margin-bottom: -0.25em;height:1.5em;             display:inline-block;" src="/emojis/point_down.png"&gt;.&lt;/p&gt;
&lt;p&gt;Flw!&lt;/p&gt;</summary><category term="deploy"></category><category term="tsuru"></category><category term="paas"></category></entry><entry><title>Grupo de Estudos Python Sorocaba</title><link href="http://blog.abraseucodigo.com.br/grupo-de-estudos-python-sorocaba.html" rel="alternate"></link><updated>2015-09-19T23:43:00-03:00</updated><author><name>Rafael Henrique da Silva Correia</name></author><id>tag:blog.abraseucodigo.com.br,2015-09-19:grupo-de-estudos-python-sorocaba.html</id><summary type="html">&lt;p&gt;Perto do dia 2 de julho de 2015 eu o Rafael Gottsfritz e o Caio Carrara tivemos a iniciativa de nos misturar ao &lt;a class="reference external" href="http://hacklab.club/"&gt;Hacklab Sorocaba&lt;/a&gt; para tentar organizar um grupo de estudos sobre variados assuntos.
Nós queríamos trazer mais movimento de comunidades para Sorocaba e regiões próximas, visto que isso é muitíssimo popular em cidades como Campinas, São Paulo e São José dos Campos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://garoa.net.br/wiki/P%C3%A1gina_principal"&gt;Garoa Hacker Clube SP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lhc.net.br/wiki/P%C3%A1gina_principal"&gt;Laboratório Hacker Campinas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://campinas.rupy.com.br/"&gt;RuPy Campinas 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pgdaycampinas.com.br/"&gt;PG Day Campinas 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.meetup.com/pt/Grupy-SP/"&gt;GruPy-SP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.thedevelopersconference.com.br/tdc/2015/saopaulo/trilhas"&gt;TDC São Paulo 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.facebook.com/pyladiescps"&gt;Pyladies Campinas - Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://twitter.com/pyladiescps"&gt;Pyladies Campinas - Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pythonbrasil.github.io/pythonbrasil11-site/"&gt;Python Brasil 2015 - SJC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esses links acima foram apenas exemplos de eventos de comunidade ou um pouco mais comerciais que rolaram/rolam ainda por este ano (2015).&lt;/p&gt;
&lt;div class="section" id="o-inicio"&gt;
&lt;h2&gt;O início&lt;/h2&gt;
&lt;p&gt;Para tentar começar a trazer coisas legais pra Sorocaba, inicialmente divulguei na lista de &lt;a class="reference external" href="https://groups.google.com/forum/?hl=pt#!searchin/hackerspace-sorocaba/Sesc/hackerspace-sorocaba/ampID5hePrI/w0Jt_vIWSTEJ"&gt;email do Hacklab&lt;/a&gt; um bate-papo descontraído no SESC Sorocaba, era descontraído, mas para ter foco nessa &amp;quot;descontração&amp;quot; toda eu queria propor objetivos as conversas e que preferencialmente se baseasse em tecnologia (ou não, caso não tivessem muitos geeks na parada).&lt;/p&gt;
&lt;p&gt;Porém infelizmente (ou felizmente, ainda não descobri) somente EU coloquei um tema lá para discutir neste evento intitulado de &amp;quot;Quinta-feira Hacker&amp;quot; (o nome era bonito). Olha só que loucura que ficou o call4papers deste dia:&lt;/p&gt;
&lt;img alt="call4papers" src="images/grupo-de-estudos-python-sorocaba_01.png" /&gt;
&lt;p&gt;Bombando.... com &lt;a class="reference external" href="http://call4paperz.com/events/quinta-feira-hacker"&gt;1 call somente&lt;/a&gt;!!&lt;/p&gt;
&lt;p&gt;Inicialmente fiquei meio puto e imaginei que não ia aparecer ninguém no SESC, por fim foram várias pessoas (no mínimo umas 6 pelo que me recordo) ai eu fiquei mais feliz um pouco. Mas mesmo assim fiquei meio de queixo caído com o desinteresse geral das pessoas, pois eu chamei para o encontro no mínimo 50 e apareceram somente 6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hacklab-no-sabado-rolando-ainda-quase-sempre"&gt;
&lt;h2&gt;Hacklab no sábado (rolando ainda quase sempre)&lt;/h2&gt;
&lt;p&gt;Alguns dias após este &amp;quot;big evento&amp;quot; fomos novamente os 6 mosqueteiros (quase todos que foram no SESC) no sábado para nos encontrar no &lt;a class="reference external" href="http://www.macs.org.br/"&gt;Museu de Arte Contemporânea de Sorocaba&lt;/a&gt;, lá tem uma sala MUITO MUITO BACANA onde o pessoal faz umas reuniões embaixo do Museu (não amigo não é culto satânico.. é parada de hacker mesmo).&lt;/p&gt;
&lt;p&gt;Neste dia conheci o Hudson que é o cara que toca o barco do Hacklab junto com o Guilherme que é um membro assíduo também, conversamos bastante e neste mesmo dia o Hudson me falou uma coisa importante que eu estava deixando passar...&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&amp;quot;Cara pra ser um evento precisa de você e mais um&amp;quot;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Resumindo... acho que ele tinha razão, pois bastam 2 interessados para formar um pequeno grupo para fazer algo, se você estiver sozinho OK! Também é LEGAL! Porém você não tem o compromisso de estar na mesma hora no mesmo lugar para estudar algum assunto, imagino que isso seja o princípio da ideia de um &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hackerspace"&gt;hackerspace&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-grupo-de-estudos"&gt;
&lt;h2&gt;O grupo de estudos&lt;/h2&gt;
&lt;p&gt;Eis que neste dia um pouco depois surgiu a ideia de montarmos um &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/python-sorocaba"&gt;Grupo de Estudos de Python em Sorocaba&lt;/a&gt;, um grupo com um caminho simples a trilhar:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Nivelar as pessoas em Python, para que discussões futuras sejam mais proveitosas (no ponto que estamos já estão sendo)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Para isso estou dando aulas eu mesmo via &lt;a class="reference external" href="http://www.google.com/intl/pt-BR_ALL/+/learnmore/hangouts/onair.html"&gt;Hangout on Air&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Todos nós aprendendo juntos&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Existem assuntos bem complexos no mundo Python aos quais eu não domino para esses precisamos já ter entendido o básico e estarmos nivelados a ponto de aprendermos juntos&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;A parte mais legal!!!&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Começar a contribuir ou criar projetos open source!!! Sem prazo nem cobranças.. fazer algo da legal que queremos pra aprendermos mais e mais&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;E o valor do curso!? O valor é DEDICAÇÃO E INTERESSE. Se você estiver afim de entrar no Grupo tem que ter no mínimo MUITA DEDICAÇÃO E MUITO INTERESSE pois é caro o curso em termos de valores honrosos hahaha.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="quer-entrar-para-o-nosso-grupo"&gt;
&lt;h2&gt;Quer entrar para o nosso Grupo??&lt;/h2&gt;
&lt;p&gt;Basta se inscrever na lista &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/python-sorocaba"&gt;Python-Sorocaba&lt;/a&gt; e acompanhar os emails, sempre fazemos nossos encontros nas quartas-feiras a noite próximo das 20hrs.&lt;/p&gt;
&lt;p&gt;Porém caso você queira entrar neste atual momento, agora, agorinha, me manda um tweet para que eu alinhe o que você precisa estudar, pois estamos indo para a aula 12 já. Mas podemos fazer novas aulas a partir da aula 1 se tiver mais gente interessada.&lt;/p&gt;
&lt;p&gt;E ai curtiram a ideia?&lt;/p&gt;
&lt;/div&gt;
</summary><category term="python"></category><category term="grupo de estudos python"></category><category term="sorocaba"></category></entry><entry><title>Git squash?? WTF?</title><link href="http://blog.abraseucodigo.com.br/git-squash-wtf.html" rel="alternate"></link><updated>2015-03-24T10:16:00-03:00</updated><author><name>Rafael Henrique da Silva Correia</name></author><id>tag:blog.abraseucodigo.com.br,2015-03-24:git-squash-wtf.html</id><summary type="html">&lt;p&gt;Galera conforme mencionei no post anterior.. estou contribuindo com o &lt;a href="https://github.com/puppet-community/puppetboard/"&gt;puppetboard&lt;/a&gt; (mais informações no post abaixo desse :P). E fiz meu primeiro Pull Request e talz resolvendo uma questão que estava na issue para acrescentar uma nova funcionalidade ao projeto. Porém quando eu fiz meu PR (Pull Request) teve um cara que me disse o seguinte:&lt;/p&gt;
&lt;p&gt;&lt;img alt="comment-github-image" src="/images/git-squash-wtf_01.png" title="comment-github-image" /&gt;
**&lt;a href="http://www.git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits"&gt;squash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ai eu pensei como qualquer ótimo conhecedor do Git que porras é essa de squash?&lt;/p&gt;
&lt;p&gt;O squash é uma prática utilizada para combinar mais de um commit em um commit só, desta forma eliminando "lixos" do projeto. Agora aqui neste post explicarei como raios você faz isso, pois não achei uma documentação simples que explicasse a uma pessoa normal como fazer isso, e após aprender, decidi TENTAR explicar de uma forma simples &lt;img style="margin-bottom: -0.25em;height:1.5em;             display:inline-block;" src="/emojis/smile.png"&gt;.&lt;/p&gt;
&lt;h2&gt;O projeto&lt;/h2&gt;
&lt;p&gt;Primeiro obviamente você precisa ter um repositório git, para isso eu criei um repositório BEEEM simples:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir teste  
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;teste  
&lt;span class="nv"&gt;$ &lt;/span&gt;git init  
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Rafael&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git add README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Adicionado Rafael&amp;quot;&lt;/span&gt; 

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Henrique&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git add README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Adicionado Henrique&amp;quot;&lt;/span&gt; 

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;da&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; README
&lt;span class="nv"&gt;$ &lt;/span&gt;git add README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Adicionado da&amp;quot;&lt;/span&gt; 

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Silva&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git add README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Adicionado Silva&amp;quot;&lt;/span&gt; 

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Correia&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git add README  
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Adicionado Correia&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feito isso terei o seguinte histórico de commits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git log --oneline  
4c03027 Adicionado Correia  
e23576b Adicionado Silva  
769bda9 Adicionado da  
2a71622 Adicionado Henrique  
5ebadcd Adicionado Rafael
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;O squash&lt;/h2&gt;
&lt;p&gt;Agora vamos imaginar que eu quero fazer um squash a partir de Henrique, ou seja quero que os commits 2a71622, 769bda9, e23576b e 4c03027 sejam um só, pois todos tratam da adição do sobrenome no arquivo README. Para isso precisarei usar o comando rebase do git no commit que eu desejo, no caso a partir do Henrique (como é a partir do Henrique deveremos pegar 1 commit antes):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase -i 5ebadcd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Após executar este comando será aberto um arquivo temporário para podermos fazer as alterações desejadas, o arquivo será similar a este abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pick 2a71622 Adicionado Henrique  
pick 769bda9 Adicionado da  
pick e23576b Adicionado Silva  
pick 4c03027 Adicionado Correia 

# Rebase 5ebadcd..4c03027 onto 5ebadcd  
#  
# Commands:  
#  p, pick = use commit  
#  r, reword = use commit, but edit the commit message  
#  e, edit = use commit, but stop for amending  
#  s, squash = use commit, but meld into previous commit  
#  f, fixup = like &amp;quot;squash&amp;quot;, but discard this commit&amp;#39;s log message  
#  x, exec = run command (the rest of the line) using shell  
#  
# These lines can be re-ordered; they are executed from top to bottom.  
#  
# If you remove a line here THAT COMMIT WILL BE LOST.  
#  
# However, if you remove everything, the rebase will be aborted.  
#  
# Note that empty commits are commented out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neste mesmo arquivo já podemos visualizar algumas opções do que fazer com esses commits, para este post utilizaremos somente o squash, mas vale a pena conhecer as outras opções descritas abaixo de commands. Agora altere este arquivo da seguinte maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pick 2a71622 Adicionado Henrique  
squash 769bda9 Adicionado da  
squash e23576b Adicionado Silva  
squash 4c03027 Adicionado Correia 

# Rebase 5ebadcd..4c03027 onto 5ebadcd  
#  
# Commands:  
#  p, pick = use commit  
#  r, reword = use commit, but edit the commit message  
#  e, edit = use commit, but stop for amending  
#  s, squash = use commit, but meld into previous commit  
#  f, fixup = like &amp;quot;squash&amp;quot;, but discard this commit&amp;#39;s log message  
#  x, exec = run command (the rest of the line) using shell  
#  
# These lines can be re-ordered; they are executed from top to bottom.  
#  
# If you remove a line here THAT COMMIT WILL BE LOST.  
#  
# However, if you remove everything, the rebase will be aborted.  
#  
# Note that empty commits are commented out
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As linhas dos commits 769bda9, e23576b e 4c03027 foram mudadas para squash, portanto serão combinados ao commit que possui a o nome pick, então o commit 2a71622 agora será unido aos 3 commits abaixo dele. É importante comentar que o squash não remove os logs (mensagens dos commits) conforme a descrição do "Commands" já a opção fixup descarta os logs. Feita esta alteração basta salvar o arquivo e sair. Feito isso será apresentado outro arquivo similar a este abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# This is a combination of 4 commits.  
# The first commit&amp;#39;s message is:  
Adicionado Henrique  
# This is the 2nd commit message:  
Adicionado da  
# This is the 3rd commit message:  
Adicionado Silva  
# This is the 4th commit message:  
Adicionado Correia  
# Please enter the commit message for your changes. Lines starting  
# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.  
#  
# Date:      Tue Mar 24 11:08:29 2015 -0300  
#  
# rebase in progress; onto 5ebadcd  
# You are currently editing a commit while rebasing branch &amp;#39;master&amp;#39; on &amp;#39;5ebadcd&amp;#39;.  
#
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Neste arquivo você poderá mudar as mensagens de log (mensagens dos commits) caso desejar, se desejar mude alguma coisa e salve e saia do arquivo. Terminada a edição/salvamento deste arquivo você acabou o squash! Podemos ver no log como ficou a nova estrutura:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git log --oneline  
f4c9d80 Adicionado Henrique  
5ebadcd Adicionado Rafael 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git log  
commit f4c9d80a089ee35fca0eb7c6e5aabcb435fb9bb4  
Author: Rafael Henrique da Silva Correia &amp;lt;rafael@abraseucodigo.com.br&amp;gt;  
Date:   Tue Mar &lt;span class="m"&gt;24&lt;/span&gt; 11:08:29 &lt;span class="m"&gt;2015&lt;/span&gt; -0300  
    Adicionado Henrique  

    Adicionado da  

    Adicionado Silva  

    Adicionado Correia

commit 5ebadcde3eb8c006bd33ee4c62f9cbb359822d6e  
Author: Rafael Henrique da Silva Correia &amp;lt;rafael@abraseucodigo.com.br&amp;gt;  
Date:   Tue Mar &lt;span class="m"&gt;24&lt;/span&gt; 11:08:14 &lt;span class="m"&gt;2015&lt;/span&gt; -0300  
    Adicionado Rafael
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;Esta prática é bem interessante e deixa o repositório do git mais limpo, é MUITO válida principalmente em projetos grandes onde se tem muitos contribuidores (principalmente em projetos open source &lt;img style="margin-bottom: -0.25em;height:1.5em;             display:inline-block;" src="/emojis/smile.png"&gt;).&lt;/p&gt;</summary><category term="git"></category><category term="squash"></category><category term="github"></category></entry></feed>